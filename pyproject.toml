[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lamb-abm"
version = "0.1.0"
description = "A unified framework for building agent-based models with Large Language Model integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "OASIS-Fudan Complex System AI Social Scientist Team", email = "brishian20427@gmail.com"}
]
maintainers = [
    {name = "OASIS-Fudan Complex System AI Social Scientist Team", email = "brishian20427@gmail.com"}
]
keywords = [
    "agent-based modeling",
    "large language models",
    "simulation",
    "complex systems",
    "computational social science",
    "artificial intelligence"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "matplotlib>=3.4.0",
    "networkx>=2.6.0",
    "scikit-learn>=1.0.0",
    "tqdm>=4.62.0",
    "pydantic>=1.8.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
llm = [
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "tiktoken>=0.4.0",
]
visualization = [
    "plotly>=5.0.0",
    "seaborn>=0.11.0",
    "bokeh>=2.4.0",
    "ipywidgets>=7.6.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.17.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "myst-parser>=0.18.0",
    "sphinx-autodoc-typehints>=1.19.0",
]
all = [
    "lamb-abm[llm,visualization,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/your-org/lamb"
Documentation = "https://lamb.readthedocs.io"
Repository = "https://github.com/your-org/lamb.git"
"Bug Tracker" = "https://github.com/your-org/lamb/issues"
"Source Code" = "https://github.com/your-org/lamb"
"Download" = "https://pypi.org/project/lamb-abm/#files"

[project.scripts]
lamb = "lamb.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["lamb*"]
exclude = ["tests*", "docs*", "examples*", "notebooks*", "benchmarks*"]

[tool.setuptools.package-data]
lamb = ["py.typed", "*.pyi"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["lamb"]
known_third_party = ["numpy", "scipy", "pandas", "matplotlib", "networkx"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "anthropic.*",
    "plotly.*",
    "seaborn.*",
    "bokeh.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "llm: marks tests that require LLM API access",
]

[tool.coverage.run]
source = ["lamb"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
